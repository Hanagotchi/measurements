version: '3.9'

services:

  python:
    build:
      context: .
    container_name: app
    env_file:
      - .env
    networks:
      - common_network
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      sql:
        condition: service_healthy
    volumes:
      - ./app:/app
    tty: true


  rabbitmq:
    build:
      context: ./app/service/rabbitmq
      dockerfile: Dockerfile
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test:
        [
          "CMD",
          "rabbitmq-diagnostics",
          "check_port_connectivity"
        ]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 50s
    networks:
      - common_network

  sql:
    build:
      context: ./app/service/sql
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./app/service/sql/init_database_measurements.sh:/docker-entrypoint-initdb.d/init_database_measurements.sh
      - ./app/service/sql/init_table_device_plant.sh:/docker-entrypoint-initdb.d/init_table_device_plant.sh
      - ./app/service/sql/init_table_measurements.sh:/docker-entrypoint-initdb.d/init_table_measurements.sh
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-h",
          "localhost",
          "-p",
          "5432",
          "-q",
          "-U",
          "${POSTGRES_USER}",
          "-d",
          "${POSTGRES_DB}"
        ]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 50s
    networks:
      - common_network
      
networks:
  common_network:
    external: true
